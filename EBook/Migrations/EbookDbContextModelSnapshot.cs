// <auto-generated />
using System;
using Databases.Interface;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EBook.Migrations
{
    [DbContext(typeof(EbookDbContext))]
    partial class EbookDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("Biography")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 21, 12, 32, 48, 601, DateTimeKind.Local).AddTicks(23));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SocialMedia")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 21, 12, 32, 48, 601, DateTimeKind.Local).AddTicks(658));

                    b.Property<bool?>("isActive")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.HasKey("AuthorId");

                    b.ToTable("AuthorsEf");
                });

            modelBuilder.Entity("Models.AuthorEbook", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("EbookId")
                        .HasColumnType("int");

                    b.HasKey("AuthorId", "EbookId");

                    b.HasIndex("EbookId");

                    b.ToTable("AuthorEbooksEf");
                });

            modelBuilder.Entity("Models.Ebook", b =>
                {
                    b.Property<int>("EbookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EbookId"));

                    b.Property<int>("AverageCounting")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 21, 12, 32, 48, 601, DateTimeKind.Local).AddTicks(3631));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("GenereId")
                        .HasColumnType("int");

                    b.Property<int>("ISBN")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 21, 12, 32, 48, 601, DateTimeKind.Local).AddTicks(4134));

                    b.Property<string>("edition")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("bit");

                    b.HasKey("EbookId");

                    b.HasIndex("GenereId");

                    b.ToTable("EbooksEf");
                });

            modelBuilder.Entity("Models.Genere", b =>
                {
                    b.Property<int>("GenereId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenereId"));

                    b.Property<string>("GenereDescription")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("GenereName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GenereId");

                    b.ToTable("GeneresEf");
                });

            modelBuilder.Entity("Models.AuthorEbook", b =>
                {
                    b.HasOne("Models.Author", "Author")
                        .WithMany("AuthorEbooks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Ebook", "Ebook")
                        .WithMany("AuthorEbooks")
                        .HasForeignKey("EbookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Ebook");
                });

            modelBuilder.Entity("Models.Ebook", b =>
                {
                    b.HasOne("Models.Genere", "Genere")
                        .WithMany("Ebooks")
                        .HasForeignKey("GenereId")
                        .IsRequired();

                    b.Navigation("Genere");
                });

            modelBuilder.Entity("Models.Author", b =>
                {
                    b.Navigation("AuthorEbooks");
                });

            modelBuilder.Entity("Models.Ebook", b =>
                {
                    b.Navigation("AuthorEbooks");
                });

            modelBuilder.Entity("Models.Genere", b =>
                {
                    b.Navigation("Ebooks");
                });
#pragma warning restore 612, 618
        }
    }
}
